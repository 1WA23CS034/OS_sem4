#include<stdio.h>
#include<stdlib.h>

struct p{
int pid;
int at;
int bt;
int ct;
int tat;
int wt;
int rt; //remaining time
};

void fcfs(struct p*pro,int n){
int currTime=0;
for(int i=0;i<n;i++){
if(currTime<pro[i].at)currTime=pro[i].at;
pro[i].ct=currTime+pro[i].bt;
pro[i].tat=pro[i].ct-pro[i].at;
pro[i].wt=pro[i].tat-pro[i].bt;
currTime=pro[i].ct;
}
}

void SJFnp(struct p*pro,int n){
int currTime=0;
int completed[n];
for(int i=0;i<n;i++)completed[i]=0;

for(int i=0;i<n;i++){
int shortest=-1;
int min_bt=100;

for(int j=0;j<n;j++){
if(!completed[j]&&pro[j].at<=currTime&&pro[j].bt<min_bt){
min_bt=pro[j].bt;
shortest=j;
}
}

if(shortest==-1){
currTime++;
i--;
continue;
}

pro[shortest].ct=currTime+pro[shortest].bt;
pro[shortest].tat=pro[shortest].ct-pro[shortest].at;
pro[shortest].wt=pro[shortest].tat-pro[shortest].bt;
completed[shortest]=1;
currTime=pro[shortest].ct;
}
}

void SJFp(struct p*pro,int n){
int currTime=0;
int completed=0;
for(int i=0;i<n;i++)pro[i].rt=pro[i].bt;

while(completed!=n){
int shortest=-1;
int min_rt=100000;

for(int j=0;j<n;j++){
if(pro[j].at<=currTime&&pro[j].rt<min_rt&&pro[j].rt>0){
min_rt=pro[j].rt;
shortest=j;
}
}

if(shortest==-1){
currTime++;
continue;
}

pro[shortest].rt--;
currTime++;

if(pro[shortest].rt==0){
completed++;
pro[shortest].ct=currTime;
pro[shortest].tat=pro[shortest].ct-pro[shortest].at;
pro[shortest].wt=pro[shortest].tat-pro[shortest].bt;
}
}
}

void display(struct p*pro,int n){

printf("PID\tAT\tBT\tCT\tTAT\tWT\n");
for(int i=0;i<n;i++){
printf("%d\t%d\t%d\t%d\t%d\t%d\n",
pro[i].pid,pro[i].at,pro[i].bt,pro[i].ct,pro[i].tat,pro[i].wt);
}
}

int main(){
int n;
printf("Enter the number of processes: ");
scanf("%d",&n);

struct p*pro=(struct p*)malloc(n*sizeof(struct p));
if(pro==NULL){
printf("Memory allocation failed!\n");
return 1;
}

for(int i=0;i<n;i++){
pro[i].pid=i+1;
printf("Enter Arrival Time and Burst Time for Process %d (AT BT): ",pro[i].pid);
scanf("%d%d",&pro[i].at,&pro[i].bt);
}

for(int i=0;i<n-1;i++){
for(int j=0;j<n-i-1;j++){
if(pro[j].at>pro[j+1].at){
struct p temp=pro[j];
pro[j]=pro[j+1];
pro[j+1]=temp;
}
}
}

fcfs(pro,n);
printf("\nFCFS Scheduling:\n");
display(pro,n);

SJFnp(pro,n);
printf("\nSJF Non-Preemptive Scheduling:\n");
display(pro,n);

SJFp(pro,n);
printf("\nSJF Preemptive Scheduling:\n");
display(pro,n);

free(pro);

return 0;
}
